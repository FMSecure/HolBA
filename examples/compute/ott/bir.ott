embed {{ hol
open wordsTheory;
open bitstringTheory numeral_bitTheory;
}}
metavar mmap ::=
  {{ com BIR memory map }}
  {{ hol (num |-> num) }}
metavar ident ::=
  {{ hol string }}
  {{ com Identifier }}
indexvar k ::=
  {{ hol num }}
grammar
b :: b_ ::=
  {{ hol bool }}
  {{ com boolean }}
| binpred_op ( bir_binpred , word_one , word_one' ) :: M :: binpred_op_word_one
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_one]] [[word_one']]) }}
| binpred_op ( bir_binpred , word_eight , word_eight' ) :: M :: binpred_op_word_eight
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_eight]] [[word_eight']]) }}
| binpred_op ( bir_binpred , word_sixteen , word_sixteen' ) :: M :: binpred_op_word_sixteen
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_sixteen]] [[word_sixteen']]) }}
| binpred_op ( bir_binpred , word_thirtytwo , word_thirtytwo' ) :: M :: binpred_op_word_thirtytwo
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_thirtytwo]] [[word_thirtytwo']]) }}
| binpred_op ( bir_binpred , word_sixtyfour , word_sixtyfour' ) :: M :: binpred_op_word_sixtyfour
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_sixtyfour]] [[word_sixtyfour']]) }}
| binpred_op ( bir_binpred , word_hundredtwentyeight , word_hundredtwentyeight' ) :: M :: binpred_op_word_hundredtwentyeight
  {{ hol ((bir_binpred_get_oper [[bir_binpred]]) [[word_hundredtwentyeight]] [[word_hundredtwentyeight']]) }}

word_one :: word_one_ ::=
 {{ hol word1 }}
 {{ tex \mathit{word1} }}
 {{ com 1-bit word }}
| binexp_op ( bir_binexp , word_one , word_one' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_one]] [[word_one']]) }}
| unaryexp_op ( bir_unaryexp , word_one ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_one]]) }}
| b2w ( b ) :: M :: b2w
  {{ hol (bool2w [[b]]) }}

word_eight :: word_eight_ ::=
  {{ hol word8 }}
  {{ tex \mathit{word8} }}
  {{ com 8-bit word }}
| binexp_op ( bir_binexp , word_eight , word_eight' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_eight]] [[word_eight']]) }}
| unaryexp_op ( bir_unaryexp , word_eight ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_eight]]) }}

word_sixteen :: word_sixteen_ ::=
  {{ hol word16 }}
  {{ tex \mathit{word16} }}
  {{ com 16-bit word }}
| binexp_op ( bir_binexp , word_sixteen , word_sixteen' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_sixteen]] [[word_sixteen']]) }}
| unaryexp_op ( bir_unaryexp , word_sixteen ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_sixteen]]) }}

word_thirtytwo :: word_thirtytwo_ ::=
  {{ hol word32 }}
  {{ tex \mathit{word32} }}
  {{ com 32-bit word }}
| binexp_op ( bir_binexp , word_thirtytwo , word_thirtytwo' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_thirtytwo]] [[word_thirtytwo']]) }}
| unaryexp_op ( bir_unaryexp , word_thirtytwo ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_thirtytwo]]) }}

word_sixtyfour :: word_sixtyfour_ ::=
  {{ hol word64 }}
  {{ tex \mathit{word64} }}
  {{ com 64-bit word }}
| binexp_op ( bir_binexp , word_sixtyfour , word_sixtyfour' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_sixtyfour]] [[word_sixtyfour']]) }}
| unaryexp_op ( bir_unaryexp , word_sixtyfour ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_sixtyfour]]) }}

word_hundredtwentyeight :: word_hundredtwentyeight_ ::=
  {{ hol word128 }}
  {{ tex \mathit{word128} }}
  {{ com 128-bit word }}
| binexp_op ( bir_binexp , word_hundredtwentyeight , word_hundredtwentyeight' ) :: M :: binexp_op
  {{ hol ((bir_binexp_get_oper [[bir_binexp]]) [[word_hundredtwentyeight]] [[word_hundredtwentyeight']]) }}
| unaryexp_op ( bir_unaryexp , word_hundredtwentyeight ) :: M :: unaryexp_op
  {{ hol ((bir_unaryexp_get_oper [[bir_unaryexp]]) [[word_hundredtwentyeight]]) }}

bir_imm_t, bir_imm :: '' ::=
{{ com immediates }}
| Imm_one ( word_one ) :: :: Imm1
| Imm_eight ( word_eight ) :: :: Imm8
| Imm_sixteen ( word_sixteen ) :: :: Imm16
| Imm_thirtytwo ( word_thirtytwo ) :: :: Imm32
| Imm_sixtyfour ( word_sixtyfour ) :: :: Imm64
| Imm_hundredtwentyeight ( word_hundredtwentyeight ) :: :: Imm128

bir_immtype_t, bir_immtype :: '' ::=
{{ com immediate typing size }}
| Bit_one :: :: Bit1
| Bit_eight :: :: Bit8
| Bit_sixteen :: :: Bit16
| Bit_thirtytwo :: :: Bit32
| Bit_sixtyfour :: :: Bit64
| Bit_hundredtwentyeight :: :: Bit128
| type_of_bir_imm ( bir_imm ) :: M :: type_of_bir_imm
  {{ hol (type_of_bir_imm [[bir_imm]]) }}

bir_endian_t, bir_endian :: BEnd_ ::=
{{ com endian for memory operations }}
| BigEndian :: :: BigEndian
| LittleEndian :: :: LittleEndian
| NoEndian :: :: NoEndian

bir_val_t, bir_val :: BVal_ ::=
{{ com values for evaluation relation }}
| ValImm ( bir_imm ) :: :: Imm
| ValMem ( bir_immtype , bir_immtype' , mmap ) :: :: Mem
  {{ com address type / value type }}

bir_type_t, bir_type :: BType_ ::=
{{ com general typing }}
| TypeImm ( bir_immtype ) :: :: Imm
| TypeMem ( bir_immtype , bir_immtype' ) :: :: Mem
| type_of_bir_val ( bir_val ) :: M :: type_of_bir_val
  {{ hol (type_of_bir_val [[bir_val]]) }}

bir_var_t, bir_var :: '' ::=
{{ com variable to lookup in environment }}
| Var ( ident ) :: :: BVar

bir_binexp_t, bir_binexp :: BIExp_ ::=
{{ com binary expressions }}
| And :: :: And
| Plus :: :: Plus

bir_unaryexp_t, bir_unaryexp :: BIExp_ ::=
{{ com unary expressions }}
| ChangeSign :: :: ChangeSign
| Not :: :: Not

bir_binpred_t, bir_binpred :: BIExp_ ::=
{{ com binary predicates }}
| Equal :: :: Equal
| LessThan :: :: LessThan

bir_exp_t, bir_exp :: BExp_ ::=
{{ com BIR expressions }}
| Const ( bir_imm ) :: :: Const
| MemConst ( bir_immtype , bir_immtype' , mmap ) :: :: MemConst
  {{ com address type / value type }}
| Den ( bir_var ) :: :: Den
| BinExp ( bir_binexp , bir_exp1 , bir_exp2 ) :: :: BinExp
| UnaryExp ( bir_unaryexp , bir_exp ) :: :: UnaryExp
| BinPred ( bir_binpred , bir_exp1 , bir_exp2 ) :: :: BinPred
| IfThenElse ( bir_exp , bir_exp1 , bir_exp2 ) :: :: IfThenElse
| Load ( bir_exp1 , bir_exp2 , bir_endian , bir_immtype ) :: :: Load
  {{ com Memory value / Address Value (Imm) / Endian / Type of where to load }}
| Store ( bir_exp1 , bir_exp2 , bir_endian , bir_exp3 ) :: :: Store
  {{ com Memory value / Address Value (Imm) / Endian / Value to store }}

terminals :: terminals_ ::=
| Imm_one :: :: imm_one {{ tex \mathsf{Imm1} }}
| Imm_eight :: :: imm_eight {{ tex \mathsf{Imm8} }}
| Imm_sixteen :: :: imm_sixteen {{ tex \mathsf{Imm16} }}
| Imm_thirtytwo :: :: imm_thirtytwo {{ tex \mathsf{Imm32} }}
| Imm_sixtyfour :: :: imm_sixtyfour {{ tex \mathsf{Imm64} }}
| Imm_hundredtwentyeight :: :: imm_hundredtwentyeight {{ tex \mathsf{Imm128} }}
| Bit_one :: :: Bit_one {{ tex \mathbf{Bit1} }}
| Bit_eight :: :: Bit_eight {{ tex \mathbf{Bit8} }}
| Bit_sixteen :: :: Bit_sixteen {{ tex \mathbf{Bit16} }}
| Bit_thirtytwo :: :: Bit_thirtytwo {{ tex \mathbf{Bit32} }}
| Bit_sixtyfour :: :: Bit_sixtyfour {{ tex \mathbf{Bit64} }}
| Bit_hundredtwentyeight :: :: Bit_hundredtwentyeight {{ tex \mathbf{Bit128} }}
| ValImm :: :: ValImm {{ tex \mathsf{ValImm} }}
| ValMem :: :: ValMem {{ tex \mathsf{ValMem} }}
| TypeImm :: :: TypeImm {{ tex \mathsf{TypeImm} }}
| TypeMem :: :: TypeMem {{ tex \mathsf{TypeMem} }}
| Var :: :: Var {{ tex \mathsf{Var} }}
| Const :: :: Const {{ tex \mathsf{Const} }}
| MemConst :: :: MemConst {{ tex \mathsf{MemConst} }}
| Den :: :: Den {{ tex \mathsf{Den} }}
| BinExp :: :: BinExp {{ tex \mathsf{BinExp} }}
| UnaryExp :: :: UnaryExp {{ tex \mathsf{UnaryExp} }}
| BinPred :: :: BinPred {{ tex \mathsf{BinPred} }}
| IfThenElse :: :: IfThenElse {{ tex \mathsf{IfThenElse} }}
| Load :: :: Load {{ tex \mathsf{Load} }}
| Store :: :: Store {{ tex \mathsf{Store} }}
| bir_env_lookup_rel :: :: bir_env_lookup_rel {{ tex \mathit{bir\_env\_lookup\_rel} }}
| size_of_bir_immtype :: :: size_of_bir_immtype {{ tex \mathit{size\_of\_bir\_immtype} }}
| type_of_bir_imm :: :: type_of_bir_imm {{ tex \mathit{type\_of\_bir\_imm} }}
| type_of_bir_val :: :: type_of_bir_val {{ tex \mathit{type\_of\_bir\_val} }}
| binexp_op :: :: binexp_op {{ tex \mathit{binexp\_op} }}
| unaryexp_op :: :: unaryexp_op {{ tex \mathit{unaryexp\_op} }}
| binpred_op :: :: binpred_op {{ tex \mathit{binpred\_op} }}
| |- :: :: vdash {{ tex \vdash }}
| ~> :: :: leadsto {{ tex \leadsto }}
| <= :: :: leq {{ tex \leq }}
| ** :: :: pow {{ tex \mathit{**} }}
| Label :: :: Label {{ tex \mathsf{Label} }}
| Address :: :: Address {{ tex \mathsf{Address} }}
| Exp :: :: Exp {{ tex \mathsf{Exp} }}
| Assign :: :: Assign {{ tex \mathsf{Assign} }}
| Jmp :: :: Jmp {{ tex \mathsf{Jmp} }}
| CJmp :: :: CJmp {{ tex \mathsf{CJmp} }}
| Basic :: :: Basic {{ tex \mathsf{Basic} }}
| End :: :: End {{ tex \mathsf{End} }}
| BirProgram :: :: BirProgram {{ tex \mathsf{BirProgram} }}
| JumpOutside :: :: JumpOutside {{ tex \mathsf{JumpOutside} }}

embed {{ hol
(* Booleans *)

Definition bool2w_def:
  bool2w b = (if b then 1w else 0w):word1
End

Definition bool2b_def:
  bool2b b = Imm1 (bool2w b)
End

Definition birT_def:
  birT = BVal_Imm (Imm1 1w)
End

Definition birF_def:
  birF = BVal_Imm (Imm1 0w)
End

(* Utility functions *)
Definition bir_dest_bool_val_def:
  (bir_dest_bool_val (BVal_Imm (Imm1 w)) = SOME (w = 1w)) /\
  (bir_dest_bool_val _ = NONE)
End

Definition val_from_imm_option_def:
  (val_from_imm_option NONE = NONE) /\
  (val_from_imm_option (SOME imm) = SOME (BVal_Imm imm))
End

(* ------ Env ------- *)

Datatype:
  bir_var_environment_t = BEnv (ident -> (bir_val_t option))
End

(* Lookup function *)
Definition bir_env_lookup_def:
  bir_env_lookup (BEnv env) (BVar id) = env id
End

(* Lookup relation *)
Definition bir_env_lookup_rel_def:
  bir_env_lookup_rel (BEnv env) (BVar id) a = (env id = (SOME a)) 
End

(* Empty environment *)
Definition bir_empty_env_def:
  bir_empty_env = BEnv (\x. NONE)
End

(* Update environment *)
(* Slightly differs from original as we don’t check for existence here *)
Definition bir_env_update_def:
  bir_env_update ((BEnv env):bir_var_environment_t) (BVar id) v = BEnv ((id =+ SOME v) env)
End

(* --------- Typing ------- *)

(* Gives the size of an immediate as a number *)
Definition size_of_bir_immtype_def:
  (size_of_bir_immtype Bit1 = 1) /\
  (size_of_bir_immtype Bit8 = 8) /\
  (size_of_bir_immtype Bit16 = 16) /\
  (size_of_bir_immtype Bit32 = 32) /\
  (size_of_bir_immtype Bit64 = 64) /\
  (size_of_bir_immtype Bit128 = 128) 
End

(* Typing function for immediates *)
Definition type_of_bir_imm_def:
  (type_of_bir_imm (Imm1 w) = Bit1) /\
  (type_of_bir_imm (Imm8 w) = Bit8) /\
  (type_of_bir_imm (Imm16 w) = Bit16) /\
  (type_of_bir_imm (Imm32 w) = Bit32) /\
  (type_of_bir_imm (Imm64 w) = Bit64) /\
  (type_of_bir_imm (Imm128 w) = Bit128)
End

(* Typing function for values *)
Definition type_of_bir_val_def:
  (type_of_bir_val (BVal_Imm imm) = (BType_Imm (type_of_bir_imm imm))) /\
  (type_of_bir_val (BVal_Mem aty vty mmap) = (BType_Mem aty vty) )
End

(* Gets the operator for a given binary operation *)
Definition bir_binexp_get_oper_def:
  (bir_binexp_get_oper BIExp_And = word_and) /\
  (bir_binexp_get_oper BIExp_Plus = word_add)
End

(* Gets the operator for a given unary operation *)
Definition bir_unaryexp_get_oper_def:
  (bir_unaryexp_get_oper BIExp_Not = word_1comp) /\
  (bir_unaryexp_get_oper BIExp_ChangeSign = word_2comp)
End

(* Gets the operator for a given binary predicate *)
Definition bir_binpred_get_oper_def:
  (bir_binpred_get_oper BIExp_Equal = $=) /\
  (bir_binpred_get_oper BIExp_LessThan = word_lo)
End
}}

metavar bir_var_environment_t, bir_var_environment, env ::=
 {{ hol bir_var_environment_t }}

grammar

formula :: formula_ ::=          
| judgement           ::   :: judgement
| bir_env_lookup_rel ( bir_var_environment , bir_var , bir_val ) :: M :: bir_env_lookup_rel
  {{ hol (bir_env_lookup_rel [[bir_var_environment]] [[bir_var]] [[bir_val]]) }}
| n = n' :: M :: n_eq
  {{ hol ([[n]] = [[n']]) }}
| n '<=' n' :: M :: n_lt
  {{ hol ([[n]] <= [[n']]) }}
| bir_val bir_val1 bir_val2 ~> bir_val' :: M :: bir_eval_ifthenelse
  {{ hol (bir_eval_ifthenelse [[bir_val]] [[bir_val1]] [[bir_val2]] [[bir_val']]) }}
| bir_val1 bir_val2 bir_endian bir_immtype ~> bir_val3 :: M :: bir_eval_load
  {{ hol (bir_eval_load [[bir_val1]] [[bir_val2]] [[bir_endian]] [[bir_immtype]] [[bir_val3]]) }}
| bir_val1 bir_val2 bir_endian bir_val3 ~> bir_val :: M :: bir_eval_store
  {{ hol (bir_eval_store [[bir_val1]] [[bir_val2]] [[bir_endian]] [[bir_val3]] [[bir_val]]) }}

n :: n_ ::=
  {{ hol num }}
| n MOD n' :: M :: mod
  {{ hol ([[n]] MOD [[n']]) }}
| n DIV n' :: M :: div
  {{ hol ([[n]] DIV [[n']]) }}
| 2 ** n :: M :: two_pow
  {{ hol (2**[[n]]) }}
| 0 :: M :: zero
  {{ hol 0 }}
| 1 :: M :: one
  {{ hol 1 }}
| size_of_bir_immtype ( bir_immtype ) :: M :: size_of_bir_immtype
  {{ hol (size_of_bir_immtype [[bir_immtype]]) }}

defns
  type_of_bir_exp :: '' ::= 

defn
  bir_var_environment |- bir_exp : bir_type :: :: type_of_bir_exp :: Type_BExp_
  {{ com typing relation for BIR expressions }} by

  --------------------------------------------------------- :: Const
  env |- Const(bir_imm) : TypeImm(type_of_bir_imm(bir_imm))

  ------------------------------------------------------------------------------------- :: MemConst
  env |- MemConst(bir_immtype1,bir_immtype2,mmap) : TypeMem(bir_immtype1,bir_immtype2)

  bir_env_lookup_rel(env,bir_var,bir_val)
  ---------------------------------------------- :: Den
  env |- Den(bir_var) : type_of_bir_val(bir_val)

  env |- bir_exp1 : TypeImm(bir_immtype)
  env |- bir_exp2 : TypeImm(bir_immtype)
  ------------------------------------------------------------------ :: BinExp
  env |- BinExp(bir_binexp,bir_exp1,bir_exp2) : TypeImm(bir_immtype)

  env |- bir_exp : TypeImm(bir_immtype)
  ------------------------------------------------------------ :: UnaryExp
  env |- UnaryExp(bir_unaryexp,bir_exp) : TypeImm(bir_immtype)

  env |- bir_exp1 : TypeImm(bir_immtype)
  env |- bir_exp2 : TypeImm(bir_immtype)
  ----------------------------------------------------------------- :: BinPred
  env |- BinPred(bir_binpred,bir_exp1,bir_exp2) : TypeImm(Bit_one)

  env |- bir_exp1 : bir_type
  env |- bir_exp2 : bir_type
  env |- bir_exp : TypeImm(Bit_one)
  ------------------------------------------------------- :: IfThenElse
  env |- IfThenElse(bir_exp,bir_exp1,bir_exp2) : bir_type

  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) = 1
  -------------------------------------------------------------------------- :: Load_NoEndian
  env |- Load(bir_exp1,bir_exp2,NoEndian,bir_immtype) : TypeImm(bir_immtype)

  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  --------------------------------------------------------------------------- :: Load_BigEndian
  env |- Load(bir_exp1,bir_exp2,BigEndian,bir_immtype) : TypeImm(bir_immtype)

  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  ------------------------------------------------------------------------------ :: Load_LittleEndian
  env |- Load(bir_exp1,bir_exp2,LittleEndian,bir_immtype) : TypeImm(bir_immtype)
  
  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  env |- bir_exp3 : TypeImm(bir_immtype)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) = 1
  ------------------------------------------------------------ :: Store_NoEndian
  env |- Store(bir_exp1,bir_exp2,NoEndian,bir_exp3) : TypeMem(bir_immtype1,bir_immtype2)

  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  env |- bir_exp3 : TypeImm(bir_immtype)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  ------------------------------------------------------------ :: Store_BigEndian
  env |- Store(bir_exp1,bir_exp2,BigEndian,bir_exp3) : TypeMem(bir_immtype1,bir_immtype2)

  env |- bir_exp1 : TypeMem(bir_immtype1,bir_immtype2)
  env |- bir_exp2 : TypeImm(bir_immtype1)
  env |- bir_exp3 : TypeImm(bir_immtype)
  size_of_bir_immtype(bir_immtype) MOD size_of_bir_immtype(bir_immtype2) = 0
  size_of_bir_immtype(bir_immtype) DIV size_of_bir_immtype(bir_immtype2) <= 2**size_of_bir_immtype(bir_immtype1)
  ------------------------------------------------------------------------------------------- :: Store_LittleEndian
  env |- Store(bir_exp1,bir_exp2,LittleEndian,bir_exp3) : TypeMem(bir_immtype1,bir_immtype2)

defns
  bir_eval_binexp_imm :: '' ::=

defn
  bir_binexp_t bir_imm_t bir_imm_t' ~> bir_imm_t'' :: :: bir_eval_binexp_imm :: Eval_BinExp_Imm_
  {{ com evaluation of a binary expression of two immediates }} by

  -------------------------------------------------------- :: One
  bir_binexp Imm_one(word_one) Imm_one(word_one') ~> Imm_one(binexp_op(bir_binexp,word_one,word_one'))

  ------------------------------------------------------------------------------------------------------------------ :: Eight
  bir_binexp Imm_eight(word_eight) Imm_eight(word_eight') ~> Imm_eight(binexp_op(bir_binexp,word_eight,word_eight'))

  ------------------------------------------------------------------------------------------------------------------ :: Sixteen
  bir_binexp Imm_sixteen(word_sixteen) Imm_sixteen(word_sixteen') ~> Imm_sixteen(binexp_op(bir_binexp,word_sixteen,word_sixteen'))

  ------------------------------------------------------------------------------------------------------------------ :: Thirtytwo
  bir_binexp Imm_thirtytwo(word_thirtytwo) Imm_thirtytwo(word_thirtytwo') ~> Imm_thirtytwo(binexp_op(bir_binexp,word_thirtytwo,word_thirtytwo'))

  ------------------------------------------------------------------------------------------------------------------ :: Sixtyfour
  bir_binexp Imm_sixtyfour(word_sixtyfour) Imm_sixtyfour(word_sixtyfour') ~> Imm_sixtyfour(binexp_op(bir_binexp,word_sixtyfour,word_sixtyfour'))

  ------------------------------------------------------------------------------------------------------------------ :: Hundredtwentyeight
  bir_binexp Imm_hundredtwentyeight(word_hundredtwentyeight) Imm_hundredtwentyeight(word_hundredtwentyeight') ~> Imm_hundredtwentyeight(binexp_op(bir_binexp,word_hundredtwentyeight,word_hundredtwentyeight'))

defns
  bir_eval_unaryexp_imm :: '' ::=

defn
  bir_unaryexp_t bir_imm_t ~> bir_imm_t' :: :: bir_eval_unaryexp_imm :: Eval_UnaryExp_Imm_
  {{ com evaluation of a unary expression of one immediate }} by

  --------------------------------------------------------------------------- :: One
  bir_unaryexp Imm_one(word_one) ~> Imm_one(unaryexp_op(bir_unaryexp,word_one))

  --------------------------------------------------------------------------- :: Eight
  bir_unaryexp Imm_eight(word_eight) ~> Imm_eight(unaryexp_op(bir_unaryexp,word_eight))

  --------------------------------------------------------------------------- :: Sixteen
  bir_unaryexp Imm_sixteen(word_sixteen) ~> Imm_sixteen(unaryexp_op(bir_unaryexp,word_sixteen))

  --------------------------------------------------------------------------- :: Thirtytwo
  bir_unaryexp Imm_thirtytwo(word_thirtytwo) ~> Imm_thirtytwo(unaryexp_op(bir_unaryexp,word_thirtytwo))

  --------------------------------------------------------------------------- :: Sixtyfour
  bir_unaryexp Imm_sixtyfour(word_sixtyfour) ~> Imm_sixtyfour(unaryexp_op(bir_unaryexp,word_sixtyfour))

  --------------------------------------------------------------------------- :: Hundredtwentyeight
  bir_unaryexp Imm_hundredtwentyeight(word_hundredtwentyeight) ~> Imm_hundredtwentyeight(unaryexp_op(bir_unaryexp,word_hundredtwentyeight))

defns
  bir_eval_binpred_imm :: '' ::=

defn
  bir_binpred_t bir_imm_t bir_imm_t' ~> b :: :: bir_eval_binpred_imm :: Eval_BinPred_Imm_
  {{ com evaluation of a binary predicate of two immediates }} by

  -------------------------------------------------------- :: One
  bir_binpred Imm_one(word_one) Imm_one(word_one') ~> binpred_op(bir_binpred,word_one,word_one')

  ------------------------------------------------------------------------------------------------------------------ :: Eight
  bir_binpred Imm_eight(word_eight) Imm_eight(word_eight') ~> binpred_op(bir_binpred,word_eight,word_eight')

  ------------------------------------------------------------------------------------------------------------------ :: Sixteen
  bir_binpred Imm_sixteen(word_sixteen) Imm_sixteen(word_sixteen') ~> binpred_op(bir_binpred,word_sixteen,word_sixteen')

  ------------------------------------------------------------------------------------------------------------------ :: Thirtytwo
  bir_binpred Imm_thirtytwo(word_thirtytwo) Imm_thirtytwo(word_thirtytwo') ~> binpred_op(bir_binpred,word_thirtytwo,word_thirtytwo')

  ------------------------------------------------------------------------------------------------------------------ :: Sixtyfour
  bir_binpred Imm_sixtyfour(word_sixtyfour) Imm_sixtyfour(word_sixtyfour') ~> binpred_op(bir_binpred,word_sixtyfour,word_sixtyfour')

  ------------------------------------------------------------------------------------------------------------------ :: Hundredtwentyeight
  bir_binpred Imm_hundredtwentyeight(word_hundredtwentyeight) Imm_hundredtwentyeight(word_hundredtwentyeight') ~> binpred_op(bir_binpred,word_hundredtwentyeight,word_hundredtwentyeight')

defns
  bir_eval_binpred :: '' ::=

defn
  bir_binpred_t bir_val_t bir_val_t' ~> bir_val_t'' :: :: bir_eval_binpred :: Eval_BinPred_
   {{ com evaluation of a binary predicate of two bir values }} by

  bir_binpred bir_imm bir_imm' ~> b
  ----------------------------------------------------------------------- :: Val
  bir_binpred ValImm(bir_imm) ValImm(bir_imm') ~> ValImm(Imm_one(b2w(b)))

defns
  bir_eval_binexp :: '' ::=

defn
  bir_binexp_t bir_val_t bir_val_t' ~> bir_val_t'' :: :: bir_eval_binexp :: Eval_BinExp_
   {{ com evaluation of a binary expression of two bir values }} by

  bir_binexp bir_imm1 bir_imm2 ~> bir_imm
  --------------------------------------------------------------- :: Val
  bir_binexp ValImm(bir_imm1) ValImm(bir_imm2) ~> ValImm(bir_imm)

defns
  bir_eval_unaryexp :: '' ::=

defn
  bir_unaryexp_t bir_val_t ~> bir_val_t' :: :: bir_eval_unaryexp :: Eval_UnExp_
   {{ com evaluation of a unary expression of one bir value }} by

  bir_unaryexp bir_imm1 ~> bir_imm
  ------------------------------------------------ :: Val
  bir_unaryexp ValImm(bir_imm1) ~> ValImm(bir_imm)

embed
{{ hol

(* Evaluates a general ifthenelse expression with values as parameters *)
Inductive bir_eval_ifthenelse:
[~BExp_IfThenElseT:]
  bir_eval_ifthenelse birT (v1:bir_val_t) (v2:bir_val_t) v1 

[~BExp_IfThenElseF:]
  bir_eval_ifthenelse birF v1 v2 v2
End

(* Number to Bitstring *)
Definition n2bs_def:
  (n2bs n Bit1   = Imm1   (n2w n)) /\
  (n2bs n Bit8   = Imm8   (n2w n)) /\
  (n2bs n Bit16  = Imm16  (n2w n)) /\
  (n2bs n Bit32  = Imm32  (n2w n)) /\
  (n2bs n Bit64  = Imm64  (n2w n)) /\
  (n2bs n Bit128 = Imm128 (n2w n))
End

(* Boolean list (vector) to bitstring *)
Definition v2bs_def:
  v2bs v s = n2bs (v2n v) s
End

(* Immediate to number *)
Definition b2n_def:
  (b2n ( Imm1   w ) = w2n w) /\
  (b2n ( Imm8   w ) = w2n w) /\
  (b2n ( Imm16  w ) = w2n w) /\
  (b2n ( Imm32  w ) = w2n w) /\
  (b2n ( Imm64  w ) = w2n w) /\
  (b2n ( Imm128 w ) = w2n w)
End

(* Immediate to bitstring *)
Definition b2v_def:
  (b2v ( Imm1   w ) = w2v w) /\
  (b2v ( Imm8   w ) = w2v w) /\
  (b2v ( Imm16  w ) = w2v w) /\
  (b2v ( Imm32  w ) = w2v w) /\
  (b2v ( Imm64  w ) = w2v w) /\
  (b2v ( Imm128 w ) = w2v w)
End

Definition bitstring_split_aux_def:
  (bitstring_split_aux 0 acc bs = NONE) /\
  (bitstring_split_aux n acc [] = SOME $ REVERSE acc) /\
  (bitstring_split_aux n acc bs =
    bitstring_split_aux n ((TAKE n bs)::acc) (DROP n bs))
Termination
  WF_REL_TAC `measure (\ (_, _, l). LENGTH l)` >>
  simp_tac list_ss []
End

(* Splits a bitstring in chunks of n bits *)
Definition bitstring_split_def:
  bitstring_split n bs = bitstring_split_aux n [] bs
End

Definition is_exp_well_typed_def:
  is_exp_well_typed env exp = ?ty. type_of_bir_exp env exp ty
End

(* Load a value from the mmap at the given address *)
Definition bir_load_mmap_def:
  bir_load_mmap (mmap: num |-> num) a =
      case FLOOKUP mmap a of
        | NONE => 0
        | SOME v => v
End

(* Concatenate multiple bitstrings to a number on the correct number of bits *)
Definition bir_mem_concat_def:
  bir_mem_concat vl rty = v2bs (FLAT vl) rty
End

(* Compute the address modulo the address space *)
Definition bir_mem_addr_def:
  bir_mem_addr aty a = MOD_2EXP (size_of_bir_immtype aty) a
End

(* Computes the number of memory splits we will read *)
Definition bir_number_of_mem_splits_def:
  bir_number_of_mem_splits vty rty aty =
    if ((size_of_bir_immtype rty) MOD (size_of_bir_immtype vty) = 0) then
      if ((size_of_bir_immtype rty) DIV (size_of_bir_immtype vty) <= 
        2 **(size_of_bir_immtype aty)) then
          SOME ((size_of_bir_immtype rty) DIV (size_of_bir_immtype vty))
      else NONE
    else NONE
End

(* Load a bitstring at the given address from a mmap and pad it *)
Definition bir_load_bitstring_from_mmap_def:
  bir_load_bitstring_from_mmap vty mmap (a:num) =
    fixwidth (size_of_bir_immtype vty) (n2v (bir_load_mmap mmap a))
End
  
(* Load n splits of size vty from mmap starting at addr *) 
Definition bir_load_splits_from_mmap_def:
  bir_load_splits_from_mmap aty vty mmap addr n =
    (MAP (\k. bir_load_bitstring_from_mmap vty mmap (bir_mem_addr aty (addr + k))) (COUNT_LIST n)) 
End

(* Eval an already unpacked load expression *)
Inductive bir_eval_load_from_mem:
[~BEnd_BigEndian:]
  (!aty vty mmap addr rty n.
    (bir_number_of_mem_splits vty rty aty = SOME n)
    ==>
    bir_eval_load_from_mem vty rty aty mmap BEnd_BigEndian addr 
      (BVal_Imm (bir_mem_concat (bir_load_splits_from_mmap aty vty mmap addr n) rty)))

[~BEnd_LittleEndian:]
  (!aty vty mmap addr rty n.
    (bir_number_of_mem_splits vty rty aty = SOME n)
    ==>
    bir_eval_load_from_mem vty rty aty mmap BEnd_LittleEndian addr
      (BVal_Imm (bir_mem_concat (REVERSE (bir_load_splits_from_mmap aty vty mmap addr n)) rty)))

[~BEnd_NoEndian:]
  (!aty vty mmap addr rty.
    (bir_number_of_mem_splits vty rty aty = SOME 1)
    ==>
    bir_eval_load_from_mem vty rty aty mmap BEnd_NoEndian addr
      (BVal_Imm (bir_mem_concat (bir_load_splits_from_mmap aty vty mmap addr 1) rty)))
End

Definition bir_eval_load_def:
  (bir_eval_load (BVal_Mem aty vty mmap) (BVal_Imm addr) en rty v = 
    bir_eval_load_from_mem vty rty aty mmap en (b2n addr) v) /\
  (bir_eval_load _ _ _ _ _ = F)
End

(* Add all the bitstrings in the mmap at address a *)
Definition bir_update_mmap_def:
  (bir_update_mmap aty mmap a [] = mmap) /\
  (bir_update_mmap aty mmap a (v::vs) =
    bir_update_mmap aty (FUPDATE mmap ((bir_mem_addr aty a), v2n v)) (SUC a) vs)
End

Inductive bir_eval_store_in_mem:
[~BEnd_BigEndian:]
  !vty aty result mmap addr ll.
    (bir_number_of_mem_splits vty (type_of_bir_imm result) aty = SOME _) /\
    (bitstring_split (size_of_bir_immtype vty) (b2v result) = SOME ll)
    ==>
    bir_eval_store_in_mem vty aty result mmap BEnd_BigEndian addr
      (BVal_Mem aty vty (bir_update_mmap aty mmap addr ll))

[~BEnd_LittleEndian:]
  !vty aty result mmap addr ll.
    (bir_number_of_mem_splits vty (type_of_bir_imm result) aty = SOME _) /\
    (bitstring_split (size_of_bir_immtype vty) (b2v result) = SOME ll)
    ==>
    bir_eval_store_in_mem vty aty result mmap BEnd_LittleEndian addr
      (BVal_Mem aty vty (bir_update_mmap aty mmap addr (REVERSE ll)))

[~BEnd_NoEndian:]
  !vty aty result mmap addr ll.
    (bir_number_of_mem_splits vty (type_of_bir_imm result) aty = SOME 1) /\
    (bitstring_split (size_of_bir_immtype vty) (b2v result) = SOME ll)
    ==>
    bir_eval_store_in_mem vty aty result mmap BEnd_NoEndian addr
      (BVal_Mem aty vty (bir_update_mmap aty mmap addr ll))
End

Definition bir_eval_store_def:
  (bir_eval_store (BVal_Mem aty vty mmap) (BVal_Imm addr) en (BVal_Imm result) v = 
    bir_eval_store_in_mem vty aty result mmap en (b2n addr) v) /\
  (bir_eval_store _ _ _ _ _ = F)
End
}}

defns
  bir_eval_exp :: '' ::=

defn
  bir_var_environment |- bir_exp ~> bir_val :: :: bir_eval_exp :: Eval_BExp_
  {{ com evaluation of BIR expressions }} by

  ----------- :: Const
  env |- Const(bir_imm) ~> ValImm(bir_imm)

  ------------ :: MemConst
  env |- MemConst(bir_immtype1,bir_immtype2,mmap) ~> ValMem(bir_immtype1,bir_immtype2,mmap)

  bir_env_lookup_rel(env,bir_var,bir_val)
  --------- :: Den
  env |- Den(bir_var) ~> bir_val

  env |- bir_exp1 ~> bir_val1
  env |- bir_exp2 ~> bir_val2
  bir_binexp bir_val1 bir_val2 ~> bir_val
  ------------- :: BinExp
  env |- BinExp(bir_binexp,bir_exp1,bir_exp2) ~> bir_val

  env |- bir_exp ~> bir_val
  bir_unaryexp bir_val ~> bir_val'
  ------ :: UnaryExp
  env |- UnaryExp(bir_unaryexp,bir_exp) ~> bir_val'

  env |- bir_exp1 ~> bir_val1
  env |- bir_exp2 ~> bir_val2
  bir_binpred bir_val1 bir_val2 ~> bir_val
  ----- :: BinPred
  env |- BinPred(bir_binpred,bir_exp1,bir_exp2) ~> bir_val

  env |- bir_exp ~> bir_val
  env |- bir_exp1 ~> bir_val1
  env |- bir_exp2 ~> bir_val2
  bir_val bir_val1 bir_val2 ~> bir_val3
  ----------- :: IfThenElse
  env |- IfThenElse(bir_exp,bir_exp1,bir_exp2) ~> bir_val3

  env |- bir_exp1 ~> bir_val1
  env |- bir_exp2 ~> bir_val2
  bir_val1 bir_val2 bir_endian bir_immtype ~> bir_val
  ------------ :: Load
  env |- Load(bir_exp1,bir_exp2,bir_endian,bir_immtype) ~> bir_val

  env |- bir_exp1 ~> bir_val1
  env |- bir_exp2 ~> bir_val2
  env |- bir_exp3 ~> bir_val3
  bir_val1 bir_val2 bir_endian bir_val3 ~> bir_val
  ----- :: Store
  env |- Store(bir_exp1,bir_exp2,bir_endian,bir_exp3) ~> bir_val

grammar
bir_label_t, bir_label :: BL_ ::=
{{ com Label values for jumps }}
| Label ( ident ) :: :: Label
| Address ( bir_imm ) :: :: Address

bir_label_exp_t, bir_label_exp :: BLE_ ::=
{{ com Label expressions that may be computed }}
| Label ( bir_label ) :: :: Label
| Exp ( bir_exp ) :: :: Exp

bir_stmt_basic_t, bir_stmt_basic :: BStmt_ ::=
{{ com Statements inside a program block }}
| Assign ( bir_var , bir_exp ) :: :: Assign

bir_stmt_end_t, bir_stmt_end :: BStmt_ ::=
{{ com Statements at the end of a block }}
| Jmp ( bir_label_exp ) :: :: Jmp
| CJmp ( bir_exp , bir_label_exp1 , bir_label_exp2 ) :: :: CJmp

bir_stmt_t, bir_stmt :: BStmt ::=
{{ com General statement }}
| Basic ( bir_stmt_basic ) :: :: B
| End ( bir_stmt_end ) :: :: E

embed {{ hol

(* Block type : a label, basic statements and an end statement *)
Datatype:
  bir_block_t = <|
  bb_label          : bir_label_t;
  bb_statements     : bir_stmt_basic_t list;
  bb_last_statement : bir_stmt_end_t |>
End

(* Program counter : label of the current block and the offset inside the block *)
Datatype:
  bir_programcounter_t = <| bpc_label:bir_label_t; bpc_index:num |>
End
}}

metavar bir_block_t, bir_block ::=
 {{ hol bir_block_t }}

grammar
bir_program_t, bir_program :: '' ::=
| BirProgram ( bir_block1 , ... , bir_blockk ) :: :: BirProgram

bir_status_t, bir_status :: BST_ ::=
{{ com Program state }}
| Running :: :: Running
  {{ com still running }}
| TypeError :: :: TypeError
  {{ com execution encountered a type error }}
| Failed :: :: Failed
  {{ com execution failed }}
| JumpOutside ( bir_label ) :: :: JumpOutside
  {{ com execution jumped to unknown label }}

embed {{ hol

(* Program state *)
Datatype:
  bir_state_t = <|
  bst_pc       : bir_programcounter_t;
  bst_environ  : bir_var_environment_t;
  bst_status   : bir_status_t
|>
End

(* Increment a program counter *)
Definition bir_pc_next_def:
  bir_pc_next pc = pc with bpc_index updated_by SUC
End

(* Get the index and block at the given label *)
Definition bir_get_program_block_info_by_label_def:
  bir_get_program_block_info_by_label
  (BirProgram p) l = INDEX_FIND 0 (\(x:bir_block_t). x.bb_label = l) p
End

(* Checks whether a state is still running *)
Definition bir_state_is_terminated_def:
  bir_state_is_terminated st =
  (st.bst_status <> BST_Running)
End

(* Set the program state to Failed *)
Definition bir_state_set_failed_def:
  bir_state_set_failed st =
  (st with bst_status := BST_Failed)
End

(* Set the program state to TypeError *)
Definition bir_state_set_typeerror_def:
  bir_state_set_typeerror st =
  (st with bst_status := BST_TypeError)
End

(* Get the statement of a program at the given program counter *)
Definition bir_get_current_statement_def:
  bir_get_current_statement p pc = 
    case (bir_get_program_block_info_by_label p pc.bpc_label) of 
      | NONE => NONE
      | SOME (_, bl) => if (pc.bpc_index < LENGTH bl.bb_statements) 
                        then SOME (BStmtB (EL (pc.bpc_index) bl.bb_statements)) 
                        else (if pc.bpc_index = LENGTH bl.bb_statements 
                              then SOME (BStmtE bl.bb_last_statement) 
                              else NONE)
End

(* Get all the labels of a program *)
Definition bir_labels_of_program_def:
  bir_labels_of_program (BirProgram p) =
  MAP (\bl. bl.bb_label) p
End

Definition bir_stmts_of_block_def:
  bir_stmts_of_block b = 
    (BStmtE b.bb_last_statement) :: MAP (\bst. (BStmtB bst)) b.bb_statements
End

Definition bir_stmts_of_program_def:
  bir_stmts_of_program (BirProgram blist) = 
  FLAT (MAP (\bl. bir_stmts_of_block bl) blist)
End

(* Return the program counter at the start of the block *)
Definition bir_block_pc_def:
  bir_block_pc l = <| bpc_label := l; bpc_index := 0 |>
End

(* Increment pc in a state if necessary *)
Definition bir_state_next_def:
  bir_state_next st =
     if (bir_state_is_terminated st) then st else st with bst_pc updated_by bir_pc_next
End

(* Jump to a label *)
Definition bir_jmp_to_label_def:
  bir_jmp_to_label p
   (l : bir_label_t) (st : bir_state_t) =
    if (MEM l (bir_labels_of_program p)) then
      st with bst_pc := bir_block_pc l
    else (st with bst_status := (BST_JumpOutside l))
End

(* Eval a label expression *)
Definition bir_eval_label_exp_def:
  (bir_eval_label_exp (BLE_Label l) env l' = (l = l')) /\
  (bir_eval_label_exp (BLE_Exp e) env (BL_Address i) = bir_eval_exp env e (BVal_Imm i)) /\
  (bir_eval_label_exp _ _ _ = F)
End

(* Eval a basic statement *)
Definition bir_eval_stmtB_def:
  (bir_eval_stmtB (BStmt_Assign v ex) st st' = 
    (?va. (bir_eval_exp st.bst_environ ex va) 
    /\ (st' = (st with bst_environ := (bir_env_update st.bst_environ v va)))))
End

(* Eval a Jmp statement *)
Definition bir_eval_stmt_jmp_def:
  bir_eval_stmt_jmp p le (st : bir_state_t) st' =
    (?l. bir_eval_label_exp le st.bst_environ l 
    /\ bir_jmp_to_label p l st = st')
End

(* Eval a CJmp statement *)
Definition bir_eval_stmt_cjmp_def:
  bir_eval_stmt_cjmp p ec l1 l2 (st : bir_state_t) st' =
    (if bir_eval_exp st.bst_environ ec birT then 
      bir_eval_stmt_jmp p l1 st st'
    else if bir_eval_exp st.bst_environ ec birF then
      bir_eval_stmt_jmp p l2 st st'
    else F)
End

(* Eval an end statement *)
Definition bir_eval_stmtE_def:
  (bir_eval_stmtE p (BStmt_Jmp le) st st' = bir_eval_stmt_jmp p le st st') /\
  (bir_eval_stmtE p (BStmt_CJmp e l1 l2) st st' = bir_eval_stmt_cjmp p e l1 l2 st st')
End
}}

grammar
bir_state_t, bir_state :: '' ::=
 {{ hol bir_state_t }}
| bir_state_set_failed ( bir_state ) :: M :: bir_state_set_failed
  {{ hol (bir_state_set_failed [[bir_state]]) }}
